# todo
' LeonardPauli/chess
	Created by Leonard Pauli, 7-8 sept 2018

- allowed moves
		move types definition of available tiles as a function
- move as subtype of action?
- undo functionallity
- player.captured pieces
		score
			use for remi
- game logic
		on start:
			delaUt pieces
			do rounds: round
				do moves
					handle capture?
					handle state change?
					handle en pesant
					handle promotion
- simple NPC
		- random
		- capture if possible
		- prioritise higher score
		- inspect possible reaches of two moves of same piece
			- if possible capture much higher then after just one
				- move to allow it during next move
- time limit per round option
- generate moves sequence string / serialize according to standards
- simple terminal stream based
		- input
			- move {move command}\n // performs move action
			- show // prints board + player scores
- simple terminal interactive
		- like the stream based, but using clear screen + show + prompts for better UI
- specify tests
- setup java project
- setup tests
- implement tests
- implement BoardGame
- implement Chess
- etc
- commit final

- variant:
	items! ability to place eg. hidden mines on tiles; lowering a piece's value (+ increasing partial capture score), until zero (taken).
	ability to craft tools, etc :)))

' notes:
	Checkmate, stalemate, draw by repetition, draw by insufficient force, 50-move draw.
	http://alefwiki.se/index.php?title=Dimensionsschack

' links
	https://docs.gradle.org/current/userguide/tutorial_java_projects.html
	https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html
	maven vs gradle?
	https://www.tutorialspoint.com/behavior_driven_development/behavior_driven_development_quick_guide.htm
	http://www.functionaljava.org/
	https://dzone.com/articles/junit-tutorial-beginners // meh.., reference maybe

git bisect // binary search from last known good commit to current commit to find commit that introdued an issue
	// https://blog.javabien.net/2010/03/23/git-bisect-might-save-your-day/
	manually
		last-known-good-version // eg. HEAD VERSION1.1.3
		- git bisect start last-known-good-version
		- repeat:
			- test current commit
			- (git bisect good) or (git bisect bad) // will checkout a different commit
		- when done, HEAD is at the commit that introduced the issue
		- git bisect reset // get back to commit where you started
	automatic
		- cat ../maveneclipse.sh
			#!/bin/sh
			mvn eclipse:eclipse > /dev/null
		- git bisect start HEAD VERSION1.1.3
		- git bisect run ../maveneclipse.sh