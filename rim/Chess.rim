# Chess
' LeonardPauli/chess
	Created by Leonard Pauli, 7-8 sept 2018

' changes:
	- using initial index 0 instead of common verbal index 1
		eg. for row, rank, etc

' rim:
	(a where b) -> (a | filter b)

import (:{BoardGame})


Chess is BoardGame
	rule:
		rounds.repeated.max: 3 // else; force other move or checkmate/remi
		variants:
			- "Chess960" alias "Fischer Random Chess" // https://en.wikipedia.org/wiki/Chess960
				' on start.after:
					// randomize players homeranks with same seed while keeping Bishops on opposite color
				// ... action.castle.allowed with player: true if not done already

	movesPerPlayerAndRound is Int: 1
	players.count.target is Int: 2
	Board.size.(x, y) is Int: 8
	Board.Tile.pieces.count.max is Int: 1
	Round.Move.time.duration.max: 30s
	Round.Move.Movement.Type
		- "diagonal"
		- "left"
		- "right"
		- "up"
		- "down"
		- "l-move" // the horse
		- "castling" // rokad? tower and king?
		- "en-passant" // bonde tar snett
		- "promotion" // bonde konverterar vid kanten
		- "action"
			is Action // TODO: shouldn't movement be an action?

	Round.Move.Movement
		capture is Piece
		value: capture.type.value or 0

	// TODO: automatic type detection probable by name? (ie. player -> is Player (if exists))
	on gameover with player:
		do player.active: false

	State
		- Check // escapable immediate threat for target's king by source
			source is Player
			target is Player
		- Remi
			// alias: Draw
		- Stalemate // player unable to move, but isn't in check or checkmate
		- Checkmate // inescapable immediate threat for target's king by source
			source is Player
			target is Player
			on activated:
				do gameover with target

	Board.Tile
		// alias "Square"
		is underAttack with player: some (player.pieces(.tile isn't self) |> .canAttack self)
		is safe with player: not some (players(active, not player) |> underAttack)
		path{direct, between} with tile: ...
			// self.edges(is direct) ...
		
		color: or position:
			- .row.even is .col.even: black
			- else: white

		position is Position
			row is Int
				rank with player:
					' or player.color:
							- black: board.size.y - 1 - row
							- white: row
							- else: ... // use some specifier on player instead of color?
					is home if is 0 // homerank, usually where non-pawn pieces start
			col is Int
				as String: "A".charCode + self | String.fromCharCode
			file: col as String
			as String // eg. A4

	Board.homerank with player: .tiles where (.position.row.rank with player) is home

	Piece
		canAttack with tile: some (.type.moves.possible.types |> .reaches {tile, startingTile: self})
		color: owner.player.color

	Piece.Type:
		- King
		- Queen
			value: 9
		- Rook
			value: 5
		- Knight
			value: 3
		- Bishop
			value: 3
		- Pawn
			value: 1

	Player
		color is Color
		on resign:
			do gameover with self

	on start:
		do players: 0..players.count.target |> Player
			name: "Player \(.it + 1)"
			color: or .it
				- 0: white
				- 1: black
				- else: Color.random{saturation: 0.5, lightness: 0.5}
			active: true
			pieces:
				' TODO: positions?
					should be mirrored between players
					player.pieces(is Queen).tile.color is player.color
					RKB QK BKR
				- 1 * King
				- 1 * Queen
				- 2 * Rook
				- 2 * Knight
				- 2 * Bishop
				- 8 * Pawn

	Action.Castling
		// treated as a move
		' moves both the king and a rook be:
			- "queenside castling"
				// alias "a-side castling" if Chess960
				king.position: c-file
				rook(a-side): d-file
				move.notation: "0-0-0"
			- "kingside castling"
				// alias "h-side castling" if Chess960
				king.position: g-file
				rook(h-side).position: f-file
				move.notation: "0-0"
		' if Chess960
			supports all the different possible initial positions of king and rook
		prerequisites:
			tilesInbetween:| it.tile.path{direct, between} it.tile.next
			toBeVacant: (tilesInbetween king) + king.tile.next + (tilesInbetween rook) + rook.tile.next
			- (king, castling rook).moves.previously.count: 0
			- all (tilesInbetween king |> .safe with player) // all alias and
			- all (toBeVacant |> .pieces(not (rook or king)) is Empty)
			- player.moves(is Action.Castling).count is 0
